import { type Token } from "@cashu/cashu-ts";
import { ServerType, UploadType } from "../client.js";
import { BlobDescriptor, PaymentRequest, SignedEvent } from "../types.js";
export type UploadOptions<S extends ServerType, B extends UploadType> = {
    signal?: AbortSignal;
    auth?: SignedEvent;
    onPayment?: (server: S, blob: B, request: PaymentRequest) => Promise<Token>;
    onAuth?: (server: S, blob: B) => Promise<SignedEvent>;
};
/** Upload a blob to a server, handles payment and auth */
export declare function uploadBlob<S extends ServerType, B extends UploadType>(server: S, blob: B, opts?: UploadOptions<S, B>): Promise<BlobDescriptor>;
export type MultiServerUploadOptions<S extends ServerType, B extends UploadType> = UploadOptions<S, B> & {
    onStart?: (server: S, blob: B) => void;
    onUpload?: (server: S, blob: B) => void;
    onError?: (server: S, blob: B, error: Error) => void;
};
/**
 * Creates an AsyncGenerator that can be used to upload a blob to multiple servers
 * @param servers A Set or Array of servers to upload to
 * @param blob The blob to be uploaded
 * @param signer An async function used for signing nostr events
 * @returns The BlobDescriptor if successful
 */
export declare function multiServerUpload<S extends ServerType, B extends UploadType>(servers: Iterable<S>, blob: B, opts?: MultiServerUploadOptions<S, B>): Promise<Map<S, BlobDescriptor>>;
