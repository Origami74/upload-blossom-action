import HTTPError from "../error.js";
import { encodeAuthorizationHeader } from "../auth.js";
import { getPaymentRequestFromHeaders } from "../helpers.js";
/** Mirrors a blob to a server */
export async function listBlobs(server, pubkey, opts) {
    const url = new URL(`/list/` + pubkey, server);
    if (opts?.since)
        url.searchParams.append("since", String(opts.since));
    if (opts?.until)
        url.searchParams.append("until", String(opts.until));
    let list = await fetch(url, { signal: opts?.signal });
    // handle auth and payments
    switch (list.status) {
        case 401: {
            const auth = opts?.auth || (await opts?.onAuth?.(server));
            if (!auth)
                throw new Error("Missing auth handler");
            // Try list with auth
            list = await fetch(url, {
                signal: opts?.signal,
                headers: { Authorization: encodeAuthorizationHeader(auth) },
            });
            break;
        }
        case 402: {
            if (!opts?.onPayment)
                throw new Error("Missing payment handler");
            const { getEncodedToken } = await import("@cashu/cashu-ts");
            const request = getPaymentRequestFromHeaders(list.headers);
            const token = await opts.onPayment(server, request);
            const payment = getEncodedToken(token);
            // Try list with payment
            list = await fetch(url, {
                signal: opts?.signal,
                headers: { "X-Cashu": payment },
            });
            break;
        }
    }
    // handle errors
    await HTTPError.handleErrorResponse(list);
    // return blob descriptor
    return list.json();
}
