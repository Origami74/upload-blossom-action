import { ServerType, UploadType } from "./client.js";
import { SignedEvent, Signer } from "./types.js";
export declare const now: () => number;
export declare const oneHour: () => number;
export declare function encodeAuthorizationHeader(event: SignedEvent): string;
/** Checks if an auth event matches a server / blob upload */
export declare function doseAuthMatchUpload(auth: SignedEvent, server: ServerType, blob: UploadType): Promise<boolean>;
/**
 * Creates a GET auth event
 * @param signer the signer to use for signing the event
 * @param message A human readable explanation of what the auth token will be used for
 * @param serverOrHash A server URL or one or many blob hashes
 * @param expiration The expiration time in seconds
 * @returns {Promise<SignedEvent>}
 */
export declare function createDownloadAuth(signer: Signer, serverOrHash: string | string[], message: string, expiration?: number): Promise<SignedEvent>;
/**
 * Creates an upload auth event
 * @param blobsOrHashes one or an array of sha256 hashes
 * @param signer the signer to use for signing the event
 * @param message A human readable explanation of what the auth token will be used for
 * @param expiration The expiration time in seconds
 * @returns {Promise<SignedEvent>}
 */
export declare function createUploadAuth(signer: Signer, blobsOrHashes: string | string[] | UploadType | UploadType[], message?: string, expiration?: number): Promise<SignedEvent>;
export declare function createListAuth(signer: Signer, message?: string, expiration?: number): Promise<SignedEvent>;
export declare function createDeleteAuth(signer: Signer, hash: string | string[], message?: string, expiration?: number): Promise<SignedEvent>;
