import { NostrEvent } from "@jsr/nostrify__types";
import { LNURLCallback } from "./types/LNURLCallback.js";
import { LNURLDetails } from "./types/LNURLDetails.js";
import { z } from "../NSchema.js";
interface LookupOpts {
  fetch?: typeof fetch;
  signal?: AbortSignal;
  limit?: number;
}
interface CallbackOpts {
  fetch?: typeof fetch;
  signal?: AbortSignal;
}
interface CallbackParams {
  amount: number;
  nostr?: NostrEvent;
  lnurl?: string;
}
export declare class LNURL {
  /** LNURL response schema. */ static lnurlDetailsSchema(): z.ZodType<LNURLDetails>;
  /** LNURL callback schema. */ static lnurlCallbackSchema(): z.ZodType<LNURLCallback>;
  /** Resolve an LNURL to its details. */ static lookup(lnurl: string, opts?: LookupOpts): Promise<LNURLDetails>;
  /** Generate an LNURL invoice from the params. */ static callback(url: string | URL, params: CallbackParams, opts?: CallbackOpts): Promise<LNURLCallback>;
  /** Decode an LNURL into a URL. */ static decode(lnurl: string, limit?: number): URL;
  /** Encode a URL to LNURL format. */ static encode(url: string | URL, limit?: number): `lnurl1${string}`;
}
//# sourceMappingURL=LNURL.d.ts.map